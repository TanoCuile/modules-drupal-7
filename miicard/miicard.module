<?php

/**
 * @file
 * Lets users authenticate using the miicard oAuth service and
 * provide trusted profile information
 */

define('MIICARD_OAUTH', 'https://sts.miicard.com/auth/OAuth.ashx');
define('MIICARD_API', 'https://sts.miicard.com/api/v1/Claims.svc/json/GetClaims');
define('MIICARD_ADD_LINK', 'Verify your identity with miiCard');
define('MIICARD_SIGN_IN_LINK', 'Sign in with miiCard');
define('MIICARD_REMOVE_LINK', 'Remove link with miiCard');
define('MIICARD_USER_ROLE', 'miiCard Verified');
define('MIICARD_ALLOW_CREATE_ACCOUNTS', TRUE);
define('MIICARD_HIGHLIGHT_APPROVED_USERS', TRUE);

/**
 * Implements hook_init().
 */
function miicard_init() {
  drupal_add_css(drupal_get_path('module', 'miicard') . '/miicard.css');
}

/**
 * Implements hook_menu().
 */
function miicard_menu() {
  $items['admin/config/people/miicard'] = array(
    'title' => 'miiCard',
    'description' => 'Settings for miiCard API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('miicard_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'miicard.admin.inc',
  );

  $items['user/login/miicard/register'] = array(
    'title' => 'miiCard registration',
    'page callback' => 'miicard_register',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'miicard.pages.inc',
  );

  $items['user/login/miicard'] = array(
    'title' => 'miiCard login',
    'page callback' => 'miicard_redirect',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'miicard.pages.inc',
  );

  $items['user/login/miicard/callback'] = array(
    'title' => 'miiCard login',
    'page callback' => 'miicard_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'miicard.pages.inc',
  );

  $items['user/miicard/delete'] = array(
    'title' => 'Remove miiCard',
    'page callback' => 'miicard_remove',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'miicard.pages.inc',
  );

  $items['user/%user/miicard'] = array(
    'title' => 'miiCard',
    'description' => 'miiCard Identity Assurance',
    'page callback' => 'miicard_view_identity',
    'page arguments' => array(1),
    'access callback' => 'user_view_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'miicard.pages.inc',
  );

  // Add tab for mappings to user entity fields.
  if (module_exists('field')) {
    $items['admin/config/people/accounts/miicard'] = array(
      'title' => 'miiCard mappings',
      'description' => 'Map miiCard fields to User entity fields',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('miicard_map_fields_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'miicard.fields.inc',
      'type' => MENU_LOCAL_TASK,
    );
  }

  // Add tab for mappings to user profile fields.
  if (module_exists('profile')) {
    $items['admin/config/people/profile/settings'] = array(
      'title' => 'Profiles',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['admin/config/people/profile/miicard'] = array(
      'title' => 'miiCard mappings',
      'description' => 'Map miiCard fields to User profile fields',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('miicard_map_profile_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'miicard.profile.inc',
      'type' => MENU_LOCAL_TASK,
    );
  }

  return $items;
}

/**
 * Impements hook entity_info().
 */
function miicard_entity_info() {
  $entity = array(
    'miicard' => array(
      'label' => t('miiCard'),
      'controller class' => 'MiiCardController',
      'base table' => 'miicard',
      'uri callback' => 'miicard_uri',
      'label callback' => 'format_miicard_account',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'uid',
      ),
      'bundles' => array(
        'miicard' => array(
          'label' => t('miiCard'),
          'admin' => array(
            'path' => 'admin/config/people/miicard',
            'access arguments' => array('administer site configuration'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('miiCard'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  return $entity;
}

/**
 * Implements hook_user_delete().
 */
function miicard_user_delete($account) {
  _miicard_identity_delete($account);
}

/**
 * Implements hook_user_presave().
 */
function miicard_user_presave(&$edit, $account, $category) {
  $miicard = _miicard_identity_load($account);

  module_load_include('inc', 'miicard', 'miicard.fields');
  miicard_field_create_user($edit, $miicard);

  if (module_exists('profile')) {
    module_load_include('inc', 'miicard', 'miicard.profile');
    miicard_profile_create_user($edit, $miicard);
    _miicard_save_profile($edit, $account);
  }
}

/**
 * Ensures the miiCard signup form takes place in the context of an OAuth flow.
 */
function _miicard_register_validate($form, &$form_state = array()) {
  $miicard = _miicard_get_registration_mode_wrapper();

  $token = $miicard->getAccessToken();
  $token_secret = $miicard->getAccessTokenSecret();

  if ($token == NULL || $token_secret == NULL) {
    drupal_set_message(t("You don't seem to have signed in with miiCard - click ~here~ to sign in first", array('~here~' => l(MIICARD_SIGN_IN_LINK, 'user/login/miicard'))));
    drupal_goto();
  }
}

/**
 * Registers a new user linked to the current miiCard.
 */
function _miicard_register_submit($form, $form_state = array()) {
  $miicard = _miicard_get_registration_mode_wrapper();

  $token = $miicard->getAccessToken();
  $token_secret = $miicard->getAccessTokenSecret();

  $uid = $form_state['values']['uid'];
  if ($uid && $token != NULL && $token_secret != NULL) {
    _miicard_identity_save($miicard, $uid);

    // Mark the user as approved if we've been configured to do so.
    $account = user_load($uid);
    $can_auto_approve = variable_get('miicard_auto_approve_accounts', FALSE);
    $miicard_user = _miicard_identity_load($account);
    $data = $miicard_user->data;
    $validated_email = FALSE;

    if ($data) {
      $emails = $data->getEmailAddresses();
      $user_email = $account->mail;
      if ($emails && count($emails)) {
        foreach ($emails as $miicard_email) {
          if ($user_email == $miicard_email->getAddress()) {
            $validated_email = TRUE;
          }
        }
      }
    }

    if ($account && !$account->status && $can_auto_approve && $validated_email) {
      $account->status = 1;
      user_save($account);

      /*
      Clear out messages, as we'll otherwise have an incorrect
      'waiting for approval' message in the list.
      */
      drupal_get_messages('status');

      drupal_set_message(t('Registration successful. You are now logged in.'));

      $form_state['uid'] = $account->uid;
      user_login_submit(array(), $form_state);
      drupal_goto();
    }

    $_SESSION['miicard_oauth'] = array();
  }
  else {
    drupal_set_message(t("There was a problem connecting your miiCard to your new account"), 'error');
  }
}

/**
 * Gets a miiCard object configured for the current content, or null.
 */
function _miicard_get_registration_mode_wrapper() {
  $miicard = NULL;

  if (isset($_SESSION['miicard_oauth']) && isset($_SESSION['miicard_oauth']['access_token']) && isset($_SESSION['miicard_oauth']['access_token_secret'])) {
    $key = variable_get('miicard_consumer_key', '');
    $secret = variable_get('miicard_consumer_secret', '');

    $miicard = new MiiCard($key, $secret, $_SESSION['miicard_oauth']['access_token'], $_SESSION['miicard_oauth']['access_token_secret']);
  }

  return $miicard;
}

/**
 * Implements hook_form_alter().
 */
function miicard_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
    case 'user_register_form':
      $items = array();
      $items[] = miicard_button();

      if (isset($_SESSION['miicard_oauth']['miicard_username']) && current_path() == 'user/login/miicard/register') {
        $form['#validate'] = array_merge(array('_miicard_register_validate'), $form['#validate']);
        $form['#submit'] = array_merge($form['#submit'], array('_miicard_register_submit'));
      }
      else {
        $form['miicard'] = array(
          '#markup' => theme('item_list', array('items' => $items)),
        );
      }

      break;

    case 'user_profile_form':
      global $user;
      if (substr($user->name, -12) != '@miicard.com') {
        unset($form['account']['pass']);

        unset($form['account']['current_pass']);
        unset($form['account']['current_pass_required_values']);
        $form['#validate'] = array_diff($form['#validate'], array('user_validate_current_pass'));
      }
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function miicard_block_info() {
  $block['miicard_signin']['info'] = t('Sign in with miiCard');
  $block['miicard_signin']['cache'] = DRUPAL_CACHE_GLOBAL;
  $block['miicard_profile']['info'] = t('User miiCard details');
  $block['miicard_profile']['cache'] = DRUPAL_CACHE_PER_USER;
  $block['miicard_image']['info'] = t('User miiCard image');
  $block['miicard_image']['cache'] = DRUPAL_CACHE_PER_USER;
  return $block;
}

/**
 * Implements hook_block_view().
 */
function miicard_block_view($delta) {
  global $user;

  switch ($delta) {
    case 'miicard_signin':
      if (!$user->uid) {
        $block['subject'] = '';
        $items[] = miicard_button();
        $block['content'] = theme('item_list', array('items' => $items));
        return $block;
      }
      break;

    case 'miicard_profile':
      if ($user->uid) {
        $block['subject'] = t('miiCard profile');
        $block['content'] = miicard_view_identity($user);
        return $block;
      }
      break;

    case 'miicard_image':
      if ($user->uid) {
        $block['subject'] = '';
        $block['content'] = miicard_view_image($user);
        return $block;
      }
      break;

  }
}


/**
 * Return a link to sign in with miicard.
 */
function miicard_button($text = '') {
  if (empty($text)) {
    $text = miicard_sign_in_text();
  }
  return l(t($text), 'user/login/miicard', array('attributes' => array('class' => array('miicardLoginButton'))));
}

/**
 * Load associated miiCard data.
 */
function _miicard_identity_load($account) {
  $uid = 0;
  if (is_object($account)) {
    $uid = $account->uid;
  }
  elseif (is_array($account)) {
    $uid = $account['uid'];
  }
  elseif (is_numeric($account)) {
    $uid = $account;
  }
  $entity = entity_load('miicard', array($uid));
  return reset($entity);
}

/**
 * Update/save local copy of miiCard public data from API.
 *
 * @param $miicard
 * A miiCard API class holding the current miiCard public data.
 */
/**
 * Update/save local copy of miiCard public data from API.
 *
 * @param MiiCard $miicard
 *   A miiCard API class holding the current miiCard public data.
 */
function _miicard_identity_save(&$miicard, $uid) {
  $error = FALSE;
  $profile = $miicard->getUserProfile();
  try {
    if ($uid) {
      if (!$miicard->isAuthorisationSuccess()) {
        // If login expired, revoke access token.
        db_update('miicard')
          ->condition('uid', $uid)
          ->fields(array(
            'access_token' => serialize(array()),
          ))
          ->execute();
      }
      else {
        db_merge('miicard')
          ->key(array('uid' => $uid))
          ->fields(array(
            'url' => $profile->getProfileUrl(),
            'username' => $profile->getUsername(),
            'refreshed' => time(),
            'access_token' => serialize(array($miicard->getAccessToken(), $miicard->getAccessTokenSecret())),
            'data' => serialize($profile),
          ))
          ->execute();
      }
    }
    else {
      drupal_set_message(t('miiCard user not valid'), 'error');
      $error = TRUE;
    }
  }
  catch (Exception $e) {
    $error = TRUE;
    drupal_set_message(t('Could not process miiCard data'), 'error');
    watchdog("miiCard", "miiCard save to database failed: %error", array("%error" => $e->getMessage()), WATCHDOG_ERROR);
  }

  // Update user fields and profile fields.
  if (!$error) {
    $account = user_load($uid);

    /*
    If the user doesn't have an email address, get the first verified primary
    address.
    */
    if (empty($account->mail)) {
      $new_mail = NULL;
      foreach ($profile->getEmailAddresses() as $email) {
        if ($email->getIsPrimary() && $email->getVerified()) {
          $new_mail = $email->getAddress();
          break;
        }
      }
      $account->mail = $new_mail;
    }

    // Add or remove user from miiCard role based on Identity Assured.
    $miicard_role = user_role_load_by_name(MIICARD_USER_ROLE);
    $new_roles = array();

    if ($miicard_role) {
      if ($profile->getIdentityAssured()) {
        if (!in_array(MIICARD_USER_ROLE, $account->roles)) {
          // If ID assured but no role, add role.
          $new_roles['roles'] = $account->roles;
          $new_roles['roles'][$miicard_role->rid] = $miicard_role->name;
        }
      }
      elseif (in_array(MIICARD_USER_ROLE, $account->roles)) {
        // If not assured but in has role, remove role.
        $new_roles['roles'] = $account->roles;
        unset($new_roles['roles'][$miicard_role->rid]);
      }
    }

    // Refresh user account.
    user_save($account, $new_roles);
  }

  return !$error;
}

/**
 * Delete ID associated with this account.
 */
function _miicard_identity_delete($account) {
  $uid = $account->uid;
  $miicard = _miicard_identity_load($account);

  $transaction = db_transaction();
  if (!empty($uid)) {
    try {
      field_attach_delete('miicard', $miicard);
      db_delete('authmap')
        ->condition('uid', $uid)
        ->condition('module', 'miicard')
        ->execute();
      db_delete('miicard')
        ->condition('uid', $uid)
        ->execute();
    }
    catch (Exception $e) {
      $transaction->rollback();
      watchdog_exception('miicard', $e);
      throw $e;
    }

    // Remove miiCard user role.
    $miicard_role = user_role_load_by_name(MIICARD_USER_ROLE);
    $new_roles = array('roles' => $account->roles);
    unset($new_roles['roles'][$miicard_role->rid]);

    entity_get_controller('miicard')->resetCache();
    user_save($account, $new_roles);
  }
}

/**
 * Implements hook_cron().
 */
function miicard_cron() {
  $interval = variable_get('miicard_refresh_period', 0);

  if ($interval > 0) {
    $in_batch = variable_get('miicard_in_batch', 0);

    if (!$in_batch) {
      if ((time() - variable_get('miicard_last_check', 0)) > $interval) {
        variable_set('miicard_last_check', time());
        variable_set('miicard_in_batch', 1);
        _miicard_refresh();
      }
    }
    else {
      _miicard_refresh();
    }
  }
}

/**
 * Batch update miiCard records using miiCard API and stored access tokens.
 */
function _miicard_refresh() {
  // Get max_execution_time from configuration, override 0 with 240 seconds.
  $max_execution_time = ini_get('max_execution_time') == 0 ? 240 : ini_get('max_execution_time');
  $batch_size = $max_execution_time;
  $age = time() - variable_get('miicard_refresh_period', 0);
  $s = serialize(array());

  $sql = "SELECT * FROM {miicard} WHERE refreshed < :refreshed AND access_token <> ':s' ORDER BY refreshed, uid ASC";
  $result = db_query_range($sql, 0, $batch_size, array(':refreshed' => $age, ':s' => $s));
  $cards = $result->fetchAll();

  if (count($cards) < $batch_size) {
    variable_set('miicard_in_batch', 0);
  }
  foreach ($cards as $row) {
    // Make sure we have enough time to validate the card.
    drupal_set_time_limit(240);

    _miicard_update_card(unserialize($row->access_token), $row->uid);

    // Save the user so any profile or field mappings are updated.
    $account = user_load($row->uid);
    user_save($account);

    // Stop once we have used over half of the maximum execution time.
    if ((timer_read('page') / 1000) > ($max_execution_time / 2)) {
      variable_set('miicard_in_batch', 1);
      break;
    }
  }
}

/**
 * Update the miiCard entity from the miiCard API.
 *
 * @param array $token
 *   The stored access token and secret.
 *
 * @param int $uid
 *   The Drupal uid for the user whose miiCard we're updating.
 */
function _miicard_update_card($token, $token_secret, $uid) {
  $key = variable_get('miicard_consumer_key', '');
  $secret = variable_get('miicard_consumer_secret', '');

  $miicard = new miiCard($key, $secret, $token['oauth_token'], $token['oauth_token_secret']);
  $miicard->uid = $uid;

  _miicard_identity_save($miicard, $uid);
}


/**
 * Display miiCard public image retrieved through API.
 */
function miicard_view_image($account) {
  $miicard = _miicard_identity_load($account);
  $url = $alt = '';

  if (is_object($miicard) && $miicard->data->getHasPublicProfile()) {
    $url = $miicard->data->getCardImageUrl();
    $alt = t('miiCard Image');
  }

  return theme('miicard_image', array('src' => $url, 'alt' => $alt));
}

/**
 * Display miiCard public information retrieved through API.
 */
function miicard_view_identity($account) {
  global $user;

  $miicard = _miicard_identity_load($account);
  $output = theme('miicard', array('uid' => $account->uid));

  if (!empty($miicard) && ($user->uid == $account->uid)) {
    $items[] = l(t(miicard_remove_link_text()), 'user/miicard/delete');
    $output .= theme('item_list', array('items' => $items));
  }

  if (empty($miicard) && ($user->uid == $account->uid)) {
    $output .= "<p>miiCard proves your identity to the same level as a passport or driver's licence purely online.</p>";
    $output .= '<p>' . l(t(miicard_add_link_text()), 'user/login/miicard') . '</p>';
  }
  else if (empty($miicard)) {
    $output .= "<p>This user hasn't attached a miiCard to their account yet. " . l("What is miiCard?", miicard_url("http://www.miicard.com/how-it-works"), array('attributes' => array('target' => '_blank'))) . "</p>";
  }

  return $output;
}

/**
 * Get text for sign in notice.
 */
function miicard_sign_in_text() {
  return variable_get('miicard_sign_in_link', MIICARD_SIGN_IN_LINK);
}
/**
 * Get text for add link.
 */
function miicard_add_link_text() {
  return variable_get('miicard_add_link', MIICARD_ADD_LINK);
}
/**
 * Get text for remove link.
 */
function miicard_remove_link_text() {
  return variable_get('miicard_remove_link', MIICARD_REMOVE_LINK);
}

/**
 * Implements hook_theme().
 */
function miicard_theme() {
  return array(
    'miicard' => array(
      'variables' => array('uid' => NULL),
    ),
    'miicard_template' => array(
      'variables' => array('miicard' => NULL),
      'template' => 'miicard-card',
    ),
    'miicard_image' => array(
      'variables' => array('src' => '', 'alt' => ''),
      'template' => 'miicard-image',
    ),
  );
}

/**
 * Make miiCard profile available to theme engine.
 */
function theme_miicard($variables) {
  global $user;
  $miicard = _miicard_identity_load($variables['uid']);
  $show = is_object($miicard) && is_object($miicard->data);

  return theme('miicard_template', array('miicard' => $show ? $miicard->data : NULL));
}

/**
 * Add data for use by author_pane.
 */
function miicard_preprocess_author_pane(&$variables) {
  $variables['miicard_identity'] = miicard_view_image($variables['account']);
}

/**
 * Add miiCard verification status to author information if available.
 */
function miicard_preprocess_node(&$variables) {
  if (variable_get('miicard_highlight_approved_users', FALSE)) {
    $miicard = _miicard_identity_load($variables['uid']);
    if ($miicard) {
      $profile = $miicard->data;
      if (is_object($profile) && $profile->getIdentityAssured()) {
        $variables['submitted'] = 'Submitted by ' . $variables['name'] . ' <span class="miicard-verified" title="Identity Assured by miiCard">(Identity Assured by miiCard)</span> on ' . $variables['date'];
      }
    }
  }
}

/**
 * Implements hook_comment_view().
 *
 * Adds miiCard verification status information for theming.
 */
function miicard_comment_view($comment, $view_mode, $langcode) {
  $comment->verified_author = FALSE;
  if (variable_get('miicard_highlight_approved_users', FALSE)) {
    $miicard = _miicard_identity_load($comment->uid);
    if ($miicard) {
      $profile = $miicard->data;
      if (is_object($profile) && $profile->getIdentityAssured()) {
        $comment->verified_author = TRUE;
      }
    }
  }
}

/**
 * Load Drupal user from miiCard class.
 *
 * @param MiiUserProfile $profile
 *   The miiCard profile of the current user.
 */
function _miicard_load_user(&$profile) {
  $uid = 0;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'miicard')
        ->propertyCondition('username', $profile->getUsername())
        ->range(0, 1)
        ->addMetaData('account', user_load(1));
  $result = $query->execute();

  if (isset($result['miicard'])) {
    $card_ids = array_keys($result['miicard']);
    $entity = entity_load('miicard', $card_ids);
    $card = reset($entity);
    $uid = $card->uid;
  }

  return user_load($uid);
}

/**
 * Remove miiCard identity associated with user.
 */
function miicard_remove() {
  global $user;

  _miicard_identity_delete($user);
  $miicard = _miicard_identity_load($user);
  if (empty($miicard)) {
    drupal_set_message(t('miiCard identity removed'));
  }
  else {
    drupal_set_message(t('Could not remove miiCard identity!'), 'error');
  }

  drupal_goto('user/' . $user->uid . '/edit');
}

/**
 * Outputs a miiCard identity assured tagline based on a given comment object.
 */
function miicard_attribution($comment) {
  if ($comment && $comment->verified_author) {
    return '<span class="miicard-verified" title="Identity Assured by miiCard">(Identity Assured by miiCard)</span>';
  }
  else {
    return NULL;
  }
}

/**
 * Returns a URL to miiCard.com that includes configured affiliate info.
 */
function miicard_url($url) {
  if (variable_get('miicard_affiliate_code', NULL)) {
    if (strpos($url, '?')){
      return $url . "&refCode=" . variable_get('miicard_affiliate_code', NULL);
    }
    else {
      return $url . "?refCode=" . variable_get('miicard_affiliate_code', NULL);
    }
  }
  else {
    return $url;
  }
}